// @ts-check

import fs from "fs/promises";
import path from "path";
import puppeteer from "puppeteer";
import { serve } from "./dev/serve.js";
import { build } from "./lib/build.js";
import { wait } from "./lib/util.js";

await build();
const port = process.env.PORT || 4001;
const server = serve({ port: port });

let failed = false;

console.log("launching browser");

const browser = await puppeteer.launch({
    args: ["--no-sandbox"],
});

console.log("testing...");

const examples = (await fs.readdir("examples"))
    .filter((p) => !p.startsWith(".") && p.endsWith(".js"))
    .map((d) => path.basename(d, ".js"));

for (const example of examples) {
    console.log(`testing example "${example}"`);
    const page = await browser.newPage();
    page.on("pageerror", (err) => {
        failed = true;
        console.error(example, err);
    });
    page.on("error", (err) => {
        failed = true;
        console.error(example, err);
    });
    await page.goto(`http://localhost:${port}/${example}`);
    await page.addScriptTag({ path: "scripts/lib/autoinput.js" });
    await wait(500);
    // this is to allow video elements to play that need a "real" user input
    // instead of the fake clicks generated by the autoinput script.
    // KAPLAY will take the fake clicks, but the <video> elements are
    // controlled by the browser and need a real click.
    await page.click("canvas");
    await wait(500);
    await page.close();
}

browser.close();
server.close();

console.log(
    failed
        ? "test suite failed, all is kaboomed"
        : "GOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOD",
);
process.exit(failed ? 1 : 0);
